source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
b = 1:5
mapvalues(b, c(1,3), c(6,7))
b
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
library(devtools)
install_github("mbojan/alluvial")
# Titanic data
tit <- as.data.frame(Titanic)
# 2d
tit2d <- aggregate( Freq ~ Class + Survived, data=tit, sum)
alluvial( tit2d[,1:2], freq=tit2d$Freq, xw=0.0, alpha=0.8,
         gap.width=0.1, col= "steelblue", border="white",
         layer = tit2d$Survived != "Yes" )
library(alluvial)
# Titanic data
tit <- as.data.frame(Titanic)
# 2d
tit2d <- aggregate( Freq ~ Class + Survived, data=tit, sum)
alluvial( tit2d[,1:2], freq=tit2d$Freq, xw=0.0, alpha=0.8,
         gap.width=0.1, col= "steelblue", border="white",
         layer = tit2d$Survived != "Yes" )
data(Refugees)
reshape2::dcast(Refugees, country ~ year, value.var = 'refugees')
d <- Refugees
alluvial_ts(d)
d$country
d$2005
d["2005"]
d$year
d <- reshape2::melt(data.frame(age=row.names(VADeaths), VADeaths), id.vars='age')[,c(2,1,3)]
names(d) = c('pop_group','age_group','deaths')
alluvial_ts(d)
}d
d
source("scripts.R")
source("scripts.R")
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
alluvial_ts(makeRiver(data))
d
d <- reshape2::melt(data.frame(age=row.names(VADeaths), VADeaths), id.vars='age')[,c(2,1,3)]
names(d) = c('pop_group','age_group','deaths')
d
alluvial_ts(d)
df = makeRiver(data)
df
df[,c(1,2,3)]
d <- reshape2::melt(data.frame(age=row.names(VADeaths), VADeaths), id.vars='age')[,c(2,1,3)]
d
df
df[1]
df[2]
df[,2]
df[2,]
alluvial_ts(df)
nonWithdraw
nonWithdrawn
nonWithdrawn$homeDeprivation < 50
nonWithdrawn[nonWithdrawn$homeDeprivation <= 50]
nonWithdrawn[nonWithdrawn$homeDeprivation <= 50, ]
head(nonWithdrawn[nonWithdrawn$homeDeprivation <= 50, ])
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
nw = makeRiver(data)
nw[nw$deprivedHome <= 50]
nw[nw$deprivedHome <= 50,]
nw[,nw$deprivedHome <= 50]
nw$deprivedHome
head(nw)
nw$homeDeprivation
nw[nw$homeDeprivation <= 50]
nw[nw$homeDeprivation <= 50,]
head(nw[nw$homeDeprivation <= 50,])
head(nw)
nw[nw$homeDeprivation <= 50,]$stage
sum(nw[nw$homeDeprivation <= 50,]$stage == "Accepted")
sum(nw[nw$homeDeprivation <= 50,]$stage == NA)
sum(nw[nw$homeDeprivation <= 50,]$stage == "Accepted", na.rm = T)
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
length(nw$stage)
length(data$stage)
nonWithdrawn = inputData[ ! inputData$stage %in% c("Withdrawn", "POST"), ] # Get rid of withdrawn applications
	nonWithdrawn = inputData[ ! inputData$stage %in% c("Withdrawn", "POST"), ] # Get rid of withdrawn applications
	nonWithdrawn = data[ ! data$stage %in% c("Withdrawn", "POST"), ] # Get rid of withdrawn applications
length(nonWithdrawn$stage)
	nonWithdrawn = data[ ! data$stage %in% c("Withdrawn"), ] # Get rid of withdrawn applications
length(nonWithdrawn$stage)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
alluvial_ts(makeRiver(data))
nums = makeRiver(data)
melt(nums)
melt(nums, id="total")
)
nums = makeRiver(data)
nums
d
source("scripts.R")
nums = makeRiver(data)
nums
melt(nums)
d
source("scripts.R")
source("scripts.R")
nums = makeRiver(data)
nums
alluvial_ts(nums)
d
alluvial_ts(nums, rankup = TRUE)
alluvial_ts(nums, rankup = TRUE, plotdir = "centred")
nums
is.ordered(nums
)
is.ordered(nums)
is.factor(nums)
is.factor(nums$time)
is.factor(nums$stages)
is.ordered(nums$stages)
levels(nums$stages)
factor(nums$stages)
factor(nums$stages, levels = nums$stages)
nums
source("scripts.R")
nums = makeRiver(data)
nums
levels(nums$stages)
alluvial_ts(nums, rankup = TRUE)
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
nums
nums$variable
nums$variable = factor(nums$variable, levels = c("All Areas", "Deprived Areas", "Less Deprived Areas"))
nums
nums$variable = factor(nums$variable, level = c("All Areas", "Deprived Areas", "Less Deprived Areas"))
nums
levels(nums$variable)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
png("test.png")
makeRiver(data)
dev.off()
png("test.png", width = 1000, height = 400, res = 300)
makeRiver(data)
png("test.png", width = 800, height = 400, res = 300)
makeRiver(data)
dev.off()
graphics.off()
png("test.png", width = 800, height = 400, res = 300)
makeRiver(data)
dev.off()
png("test.png", width = 800, height = 400, res = 300)
makeRiver(data)
par('mar')
par(mar=c(1,1,1,1))
makeRiver(data)
dev.off()
makeRiver(data)
source("scripts.R")
makeRiverAccess(data)
diamonds
head(diamonds)
source("scripts.R")
d = percentDropouts(data)
head(d)
dim(d)
melt(d, id = "ID")
head(diamonds)
table(melt(d, id = "ID"))
levels(d$gender)
d
head(d)
head(d[,c("gender", "sexualOrientation")
])
nums
d
ggplot(data = d, aes(x = gender)) + geom_bar()
count()
count(d)
head(count(d))
head(count(d, vars = c("gender", "sexualOrientation"))
)
head(count(d, vars = c("gender"))
)
ggplot(count(d, vars = "gender")) + geom_bar()
ggplot(count(d, vars = "gender"), aes(x = gender)) + geom_bar()
ggplot(count(d, vars = "gender"), aes(x = gender, y = freq)) + geom_bar()
ggplot(count(d, vars = "gender"), aes(x = gender, y = freq)) + geom_bar(stat="identity")
ggplot(na.omit(count(d, vars = "gender")), aes(x = gender, y = freq)) + geom_bar(stat="identity")
source("scripts.R")
percentDropouts(data)
totals = na.omit(count(data, vars = "gender"))
totals
specifics = na.omit(count(data[data$stage == "Withdrawn",], vars = "gender"D))
specifics = na.omit(count(data[data$stage == "Withdrawn",], vars = "gender"))
specifics
which(totals, min(totals$freq))
which.min(totals$freq))
which.min(totals$freq)
totals[-which.min(totals$freq)]
totals[-which.min(totals$freq), ]
source("scripts.R")
percentDropouts(data)
ggplot(percentDropouts(data), aes(x = gender, y = freq)) + geom_bar(stat="identity")
source("scripts.R")
percentDropouts(data)
binaryEthnicity = data
binaryEthnicity[binaryEthnicity$ethnicity != "White"] <- "Non-White"
source("scripts.R")
percentDropouts(data)
binaryEthnicity = data
binaryEthnicity[!is.na(binaryEthnicity$ethnicity) && binaryEthnicity$ethnicity != "White"] <- "Non-White"
binaryEthnicity
head(binaryEthnicity)
binaryEthnicity$ethnicity[!is.na(binaryEthnicity$ethnicity) && binaryEthnicity$ethnicity != "White"] <- "Non-White"
binaryEthnicity$ethnicity[!is.na(binaryEthnicity$ethnicity) && binaryEthnicity$ethnicity != "White"] <- "Non-White"
levels(binaryEthnicity$ethnicity)
l = levels(binaryEthnicity$ethnicity)
l
l[l != "White"]
levels = levels(binaryEthnicity)
levelsMerged = mapvalues(levels, from = levels[levels != "White"], to = "Non-White")
levels(binaryEthnicity) <- list("Non-White" = levels[levels != "White"]
)
levels(binaryEthnicity)
binaryEthnicity = data
levels(binaryEthnicity)
binaryEthnicity$ethnicity
levels(binaryEthnicity$ethnicity) <- list(Non-White = levels[levels != "White"])
levels(binaryEthnicity$ethnicity) <- list(`Non-White` = levels[levels != "White"])
levels(binaryEthnicity$ethnicity)
binaryEthnicity = data
levels(binaryEthnicity)
levels(binaryEthnicity$ethnicity)
l = levels(binaryEthnicity$ethnicity)
l[l != "White"] <- "Non-White"
l
source("scripts.R")
percentDropouts(data)
source("scripts.R")
percentDropouts(data)
source("scripts.R")
percentDropouts(data)
source("scripts.R")
percentDropouts(data)
binarySexualOrientation = data
levels = levels(binarySexualOrientation$sexualOrientation)
levels
levels[levels != "Heterosexual" || levels != "Prefer not to say"] <- "LGBT"
levels
levels[levels != "Heterosexual"] <- "LGBT"
levels
levels = levels(binarySexualOrientation$sexualOrientation)
levels
levels[levels != "Heterosexual"]
levels[levels != "Heterosexual"] <- "LGBT"
levels
levels = levels(binarySexualOrientation$sexualOrientation)
levels[levels != "Heterosexual" | levels != "Prefer not to say"] <- "LGBT"
levels
levels = levels(binarySexualOrientation$sexualOrientation)
levels[levels != "Heterosexual"] <- "LGBT"
levels
levels = levels(binarySexualOrientation$sexualOrientation)
levels[levels != "Heterosexual" & levels != "Prefer not to say"] <- "LGBT"
levels
source("scripts.R")
percentDropouts(data)
source("scripts.R")
percentDropouts(data)
source("scripts.R")
d = percentDropouts(data)
d
d[d$sexualOrientation != "Prefer not to say"]
d[d$sexualOrientation != "Prefer not to say",]
source("scripts.R")
d = percentDropouts(data)
source("scripts.R")
d = percentDropouts(data)
d
source("scripts.R")
percentDropouts(data)
disadvantage = data
disadvantage$disadvantageScore[disadvantage$disadvantageScore <= 50] <- "Disadvantaged"
head(disadvantage$disadvantageScore)
disadvantage$disadvantageScore
disadvantage$disadvantageScore[disadvantage$disadvantageScore > 50] <- "Less Disadvantaged"
disadvantage
disadvantage$disadvantageScore
disadvantage = data
disadvantage$disadvantageScore[disadvantage$disadvantageScore <= 50] <- "Disadvantaged"
disadvantage$disadvantageScore[is.numeric(disadvantage$disadvantageScore)] <- "Less Disadvantaged"
disadvantage$disadvantageScore
source("scripts.R")
percentDropouts(data)
source("scripts.R")
percentDropouts(data)
d = percentDropouts(data)
percentDropouts(data)
source("scripts.R")
d = percentDropouts(data)
head(d)
source("scripts.R")
d = percentDropouts(data)
d
source("scripts.R")
percentDropouts(data)
d = percentDropouts(data)
d
d = cbind(d)
d
melt(d)
factor(d)
levels(a)
colnames(d)
levels(d)
ggplot(d, aes(x = colnames(d), y = variable)) + geom_bar(stat = "identity")
colnames(melt(d))
levels(melt(d))
factor(melt(d))
melt(d)
cbind(melt(d))
rbind(d$gender, d$ethnicity)
d$gender
d
cbind(d$gender, d$ethnicity)
d = melt(d)
cbind(d$gender, d$ethnicity)
rbind(d$gender, d$ethnicity)
d
d = percentDropouts(data)
d
melt(d, id = "freq")
d
d
melt(d, id = c("freq", "freq.1", "freq.2"))
melt(d, id = c("freq", "freq.1", "freq.2", "freq.3"))
melt(d)
d = percentDropouts(data)
d
source("scripts.R")
d = percentDropouts(data)
source("scripts.R")
d = percentDropouts(data)
source("scripts.R")
d = percentDropouts(data)
source("scripts.R")
d = percentDropouts(data)
d
melt(d)
melt(d, id = "freq")
source("scripts.R")
d = percentDropouts(data)
d
melt(d)
melt(d)
source("scripts.R")
d = percentDropouts(data)
d
melt(d)
melt(d, id = "factor")
d
source("scripts.R")
d = percentDropouts(data)
source("scripts.R")
d = percentDropouts(data)
d
source("scripts.R")
d = percentDropouts(data)
d
source("scripts.R")
d = percentDropouts(data)
d
melt(d)
source("scripts.R")
d = percentDropouts(data)
d
ggplot(d, aes(x = variable, group = factor)) + geom_bar(stat = "identity")
ggplot(d, aes(x = variable, y = value, group = factor)) + geom_bar(stat = "identity")
ggplot(d, aes(x = variable, y = value, group = factor)) + geom_bar(stat = "identity", position = "dodged")
ggplot(d, aes(x = variable, y = value, group = factor)) + geom_bar(stat = "identity", position = "dodge")
ggplot(d, aes(x = variable, y = value, fill = factor)) + geom_bar(stat = "identity", position = "dodge")
data(diamonds)
head(diamonds)
ggplot(d, aes(x = factor, y = value, fill = variable)) + geom_bar(stat = "identity", position = "dodge")
ggplot(d, aes(x = variable, y = value, fill = variable)) + geom_bar(stat = "identity", position = "dodge") + facet_grid(. ~ factor)
ggplot(d, aes(x = factor, y = value, fill = variable)) + geom_bar(stat = "identity", position = "dodge") + facet_grid(. ~ factor)
ggplot(d, aes(x = variable, y = value, fill = variable)) + geom_bar(stat = "identity", position = "dodge") + facet_grid(. ~ factor)
ggplot(d, aes(x = variable, y = value, fill = variable)) + geom_bar(stat = "identity", position = "dodge") + facet_grid(. ~ factor, scales = "free")
source("scripts.R")
percentDropouts(data)
source("scripts.R")
percentDropouts(data)
source("scripts.R")
p = percentDropouts(data)
p + theme_minimal()
p + theme_minimal() + guides(colour = "none")
p + theme_minimal() + guides(color = "none")
p + theme_minimal() + theme(legend.position = "none")
p + theme_minimal() + theme(legend.position = "none", axis.text.x = element.blank())
p + theme_minimal() + theme(legend.position = "none", axis.title.x = element.blank())
p + theme_minimal() + theme(legend.position = "none", axis.title.x = element_blank())
levels(d)
d
source("scripts.R")
percentDropouts(data)
sessionInfo()
