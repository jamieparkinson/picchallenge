df = read.csv("raw.csv")
df
df = melt(read.csv("raw.csv"))
import(reshape2)
library(reshape2)
df = melt(read.csv("raw.csv"))
df
head(df)
df = read.csv("raw-trimmed.csv")
head(df)
source("scripts.R")
head(rawDF)
as.logical("hello")
a = "hello"
b = "world
"
c = "hello"
a == b
a == c
head(rawDF)
source("scripts.R")
source("scripts.R")
source("scripts.R")
head(rawDF)
source("scripts.R")
read.csv("raw-trimmed.csv")
head(read.csv("raw-trimmed.csv"))
head(read.csv("raw-trimmed.csv"))
head(read.csv("raw-trimmed.csv"))
source("scripts.R")
ncol(read.csv("raw-trimmed.csv"))
nrow(read.csv("raw-trimmed.csv"))
head(read.csv("raw-trimmed.csv"), n = 1)
head(read.csv("raw-trimmed.csv"), n = 1)
source("scripts.R")
head(rawDF)
source("scripts.R")
head(rawDF)
rawDF <- melt(read.csv("raw-trimmed.csv", col.names = columnTitles))
head(rawDF)
rawDF <- melt(read.csv("raw-trimmed.csv", col.names = columnTitles), id = c("ID"))
head(rawDF)
rawDF <- read.csv("raw-trimmed.csv", col.names = columnTitles)
head(rawDF)
head(rawDF, n = 1)
apply(rawDF[,c("disability")], 1, disability2bool)
rawDF[,c("disability")]
apply(rawDF[,c("disability")], 0, disability2bool)
apply(rawDF[,c("disability")], 2, disability2bool)
dim(rawDF[,c("disability")])
head(rawDF[,c("disability")])
rawDF$disability
apply(rawDF$disability, 1, disability2bool)
disability2bool(rawDF$disability)
source("scripts.R")
disability2bool(rawDF$disability)
lapply(rawDF$disability, disability2bool)
source("scripts.R")
disability2bool(rawDF$disability)
rawDF$disability = disability2bool(rawDF$disability)
head(rawDF, n = 1)
head(rawDF)
source("scripts.R")
head(rawDF)
stageNames
rawDF[,stageNames]
head(rawDF[,stageNames])
head(date2bool(rawDF[,stageNames]))
source("scripts.R")
head(rawDF)
source("scripts.R")
head(data, n = 1)
head(data)
source("scripts.R")
head(data)
source("scripts.R")
head(data)
head(data)
source("scripts.R")
head(data)
source("scripts.R")
source("scripts.R")
head(data)
source("scripts.R")
head(data)
library(riverplot)
head(data)
head(data$withdrawn == FALSE)
data[data$withdrawn == FALSE,]
head(data[data$withdrawn == FALSE,])
dim(data[data$withdrawn == FALSE,])
1:5
nrow(stageNames)
ncol(stageNames)
stageNames
dim(stageNames)
length(stageNames)
head(data)
sum(data$withdrawn)
sum(data$accept)
sum(data[,"accept"])
source("scripts.R")
source("scripts.R")
weights
head(weights)
makeRiver(data)
weights
source("scripts.R")
makeRiver(data)
dfSankey
lapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]) )
nonWithdrawn = inputData[inputData$withdrawn == FALSE, ] # Get rid of withdrawn applications
source("scripts.R")
makeRiver(data)
nonWithdrawn = data[data$withdrawn == FALSE, ]
lapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]) )
stageNamesChron = c("reviewRej", "onlineRej", "hirevueRej", "assessDayRej", "offerRej", "accept", "placement", "processPostClose")
lapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]) )
sapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]) )
lapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]), simplify = "array")
lapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]), simplify = "array")
lapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]))
lapply(stageNamesChron, simplify = "array", function(name) sum(nonWithdrawn[,name]))
lapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]))
vapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]))
sapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]))
read.csv("raw-trimmed.csv", na.strings = c(" ", ""))
head(read.csv("raw-trimmed.csv", na.strings = c(" ", "")))
head(read.csv("raw-trimmed.csv", na.strings = c(" ", "NA")))
head(read.csv("raw-trimmed.csv", na.strings = c(" ", "NA", "")))
source("scripts.R")
source("scripts.R")
nonWithdrawn = data[data$withdrawn == FALSE, ]
stageNamesChron = c("reviewRej", "onlineRej", "hirevueRej", "assessDayRej", "offerRej", "accept", "placement", "processPostClose")
sapply(stageNamesChron, function(name) sum(nonWithdrawn[,name]))
source("scripts.R")
head(data)
source("scripts.R")
head(data)
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
3:1
10:1
stageNamesChron = c("Application Review",
"Online Testing",
"HireVue",
"Assessment Day",
  "Offer",
  "Accepted",
  "Considered for Other Opportunities",
  "POST")
l = length(stageNamesChron)
sapply(1:l, function(n) rep(stageNamesChron[n], l - n)) 
l = length(stageNamesChron) + 1
sapply(1:l, function(n) rep(stageNamesChron[n], l - n)) 
unlist(sapply(1:l, function(n) rep(stageNamesChron[n], l - n)) )
stageNamesChron = c("Application Review",
"Online Testing",
"HireVue",
"Assessment Day",
  "Offer",
  "POST")
l = length(stageNamesChron) + 1
unlist(sapply(1:l, function(n) rep(stageNamesChron[n], l - n)) )
l = length(stageNamesChron)
unlist(sapply(1:l, function(n) rep(stageNamesChron[n], l - n)) )
b = 1:10
b[5:]
b[5:end]
b[5:-1]
b[-5]
b[-2]
tail(b,-1)
b[-1]
b[:-1]
b[-1:]
b[:1]
b[1]
b[1:3
]
b[-1]
b[-0]
b[0]
tail(b,-1)
tail(b,1)
tail(b,9)
head(b,9)
cumsum(b)
source("scripts.R")
makeRiver(data)
nonWithdrawn
head(nonWithdrawn)
nonWithdrawn$stage
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
sapply(stageNamesChron[1:(l-2)], function(name) sum(nonWithdrawn$stage == name) )
nonWithdrawn = inputData[inputData$stage != "Withdrawn", ] # Get rid of withdrawn applications
nonWithdrawn$stage[nonWithdrawn$stage == "Considered for Other Opportunities"] <- "Offer" # Merge acceptances
# !!!These are in chronological order!!!
stageNamesChron = c("Application Review",
"Online Testing",
"HireVue",
"Assessment Day",
  "Offer")
l = length(stageNamesChron) + 1
sapply(stageNamesChron[1:(l-2)], function(name) sum(nonWithdrawn$stage == name) )
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
head(nonWithdrawn)
head(data)
makeRiver(data)
source("scripts.R")
makeRiver(data)
head(makeRiver(data))
nw = makeRiver(data)
sum(nw$stage == "Application Review")
sum(nw$stage == "Online Testing")
source("scripts.R")
nw = makeRiver(data)
0:4
cumsum(0:4)
b = 0:4
source("scripts.R")
nw = makeRiver(data)
10 - 0:4
source("scripts.R")
nw = makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
nw = makeRiver(data)
nw$stage
nw = makeRiver(data)
source("scripts.R")
nw = makeRiver(data)
data[data$stage != "Withdrawn"]
source("scripts.R")
data[data$stage != "Withdrawn"]
head(data)
data$stage
data[data$stage != "Withdrawn"]
data[data$stage != "Withdrawn", ]
head(data[data$stage != "Withdrawn", ])
source("scripts.R")
nw = makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
nw = makeRiver(data)
head(nw)
nw$stage
source("scripts.R")
nw = makeRiver(data)
source("scripts.R")
nw = makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
LETTERS[1:4]
"PISS" + LETTERS[1:4]
paste("PISS", LETTERS[1:4])
source("scripts.R")
makeRiver(data)
rep(1:5, each = 2)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
c(0)*5
rep(0,5)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
stageNamesChron = c("Application Review",
"Online Testing",
"HireVue",
"Assessment Day",
  "Offer",
  "Accepted")
c(rep(stageNamesChron[1:(l-2)], each = 2), paste("Rejected At", stageNamesChron[1:(l-2)]))
c(rbind(stageNamesChron[2:(l-1)], paste("Rejected At", stageNamesChron[1:(l-2)])), rep("BLANK", l-2))
c(rbind(total - cumsum(nums), nums)), rep(0, l-2))
stageNamesChron = c("Application Review",
"Online Testing",
"HireVue",
"Assessment Day",
  "Offer",
  "Accepted")
l = length(stageNamesChron) + 1
nums = sapply(stageNamesChron[1:(l-2)], function(name) sum(nonWithdrawn$stage == name))
c(rep(stageNamesChron[1:(l-2)], each = 2), paste("Rejected At", stageNamesChron[1:(l-2)]))
c(rbind(stageNamesChron[2:(l-1)], paste("Rejected At", stageNamesChron[1:(l-2)])), rep("BLANK", l-2))
c(rbind(total - cumsum(nums), nums)), rep(0, l-2))
c(rbind(total - cumsum(nums), nums), rep(0, l-2))
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
dat = makeRiver(data)
x = toJSON(dat)
head(x)
cat(x)
bigger = data.frame(links = dat, names = unique(c(dat$start, dat$end)))
bigger = list(links = dat, names = unique(c(dat$start, dat$end)))
head(bigger)
dat$start
unique(dat$start)
unique(c(dat$start, dat$end))
c(dat$start, dat$end)
dat$end)
dat$end
cbind(dat$start, dat$end)
rbind(dat$start, dat$end)
typeof(get(dat$start))
typeof(dat$start)
bigger = list(links = dat, names = c(unique(dat$start), " "))
head(bigger)
bigger = list(links = dat, names = unique(dat$start))
head(bigger)
toJSON(bigger)
bigger = list(links = dat, names = c(unique(dat$start), " "))
bigger
bigger = list(links = dat, names = unique(dat$start))
bigger
dat$start
c(dat$start)
dat[,"start"]
append(dat[,"start"], " ")
dat$start[2]
levels(dat$start) = " "
gl
gl(dat$start, " ")
sapply(dat$start, as.character)
c(sapply(dat$start, as.character), " ")
source("scripts.R")
makeRiver(data)
json = makeRiver(data)
write(json, "applicantFlow.json")
makeRiver(data)
source("scripts.R")
source("scripts.R")
json = makeRiver(data)
json
write(json, "applicantFlow.js")
source("scripts.R")
json = makeRiver(data)
write(json, "applicantFlow.js")
source("scripts.R")
json = makeRiver(data)
cat(json)
write(json, "applicantFlow.js")
json
cat(json)
source("scripts.R")
json = makeRiver(data)
write(json, "applicantFlow.js")
source("scripts.R")
json = makeRiver(data)
write(json, "applicantFlow.js")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
b = 1:5
mapvalues(b, c(1,3), c(6,7))
b
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
source("scripts.R")
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
source("scripts.R")
makeRiver(data)
library(devtools)
install_github("mbojan/alluvial")
